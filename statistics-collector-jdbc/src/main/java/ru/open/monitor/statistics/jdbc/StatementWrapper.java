package ru.open.monitor.statistics.jdbc;

import static ru.open.monitor.statistics.item.ItemUtil.prepareStatementName;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import ru.open.monitor.statistics.database.StatisticsCollector;

public class StatementWrapper implements Statement {

    private final Statement statement;
    private final StatisticsCollector statisticsCollector;

    private final List<String> queries = new ArrayList<>();
    private int resultSetNumber = 0;

    StatementWrapper(final Statement statement, final StatisticsCollector statisticsCollector) {
        this.statement = statement;
        this.statisticsCollector = statisticsCollector;
    }

    protected String getStatementName() {
        if (queries.size() == 1) {
            return prepareStatementName(queries.get(0));
        } else {
            return "batch_with_" + queries.size() + "_queries";
        }
    }

    protected void resetResultSetNumber() {
        resultSetNumber = 0;
    }

    protected int getResultSetNumber() {
        return resultSetNumber;
    }

    protected int getAndIncrementResultSetNumber() {
        return resultSetNumber++;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        statement.addBatch(sql);
    }

    @Override
    public void cancel() throws SQLException {
        statement.cancel();
    }

    @Override
    public void clearBatch() throws SQLException {
        statement.clearBatch();
        queries.clear();
    }

    @Override
    public void clearWarnings() throws SQLException {
        statement.clearWarnings();
    }

    @Override
    public void close() throws SQLException {
        statement.close();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        statement.closeOnCompletion();
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        resetResultSetNumber();
        queries.clear();
        queries.add(sql);
        long startNanos = System.nanoTime();
        boolean hasResultSet = statement.execute(sql);
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return hasResultSet;
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        resetResultSetNumber();
        queries.clear();
        queries.add(sql);
        long startNanos = System.nanoTime();
        boolean hasResultSet = statement.execute(sql, autoGeneratedKeys);
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return hasResultSet;
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        resetResultSetNumber();
        queries.clear();
        queries.add(sql);
        long startNanos = System.nanoTime();
        boolean hasResultSet = statement.execute(sql, columnIndexes);
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return hasResultSet;
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        resetResultSetNumber();
        queries.clear();
        queries.add(sql);
        long startNanos = System.nanoTime();
        boolean hasResultSet = statement.execute(sql, columnNames);
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return hasResultSet;
    }

    @Override
    public int[] executeBatch() throws SQLException {
        resetResultSetNumber();
        long startNanos = System.nanoTime();
        int[] updateCount = statement.executeBatch();
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return updateCount;
    }

    @Override
    public long[] executeLargeBatch() throws SQLException {
        resetResultSetNumber();
        long startNanos = System.nanoTime();
        long[] updateCount = statement.executeLargeBatch();
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return updateCount;
    }

    @Override
    public long executeLargeUpdate(String sql) throws SQLException {
        resetResultSetNumber();
        queries.clear();
        queries.add(sql);
        long startNanos = System.nanoTime();
        long updateCount = statement.executeLargeUpdate(sql);
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return updateCount;
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        resetResultSetNumber();
        queries.clear();
        queries.add(sql);
        long startNanos = System.nanoTime();
        long updateCount = statement.executeLargeUpdate(sql, autoGeneratedKeys);
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return updateCount;
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        resetResultSetNumber();
        queries.clear();
        queries.add(sql);
        long startNanos = System.nanoTime();
        long updateCount = statement.executeLargeUpdate(sql, columnIndexes);
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return updateCount;
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
        resetResultSetNumber();
        queries.clear();
        queries.add(sql);
        long startNanos = System.nanoTime();
        long updateCount = statement.executeLargeUpdate(sql, columnNames);
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return updateCount;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        resetResultSetNumber();
        queries.clear();
        queries.add(sql);
        long startNanos = System.nanoTime();
        ResultSet resultSet = statement.executeQuery(sql);
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return new ResultSetProxy(resultSet, getStatementName(), getResultSetNumber(), statisticsCollector);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        resetResultSetNumber();
        queries.clear();
        queries.add(sql);
        long startNanos = System.nanoTime();
        int updateCount = statement.executeUpdate(sql);
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return updateCount;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        resetResultSetNumber();
        queries.clear();
        queries.add(sql);
        long startNanos = System.nanoTime();
        int updateCount = statement.executeUpdate(sql, autoGeneratedKeys);
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return updateCount;
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        resetResultSetNumber();
        queries.clear();
        queries.add(sql);
        long startNanos = System.nanoTime();
        int updateCount = statement.executeUpdate(sql, columnIndexes);
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return updateCount;
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        resetResultSetNumber();
        queries.clear();
        queries.add(sql);
        long startNanos = System.nanoTime();
        int updateCount = statement.executeUpdate(sql, columnNames);
        long stopNanos = System.nanoTime();
        statisticsCollector.statementExecuted(getStatementName(), stopNanos - startNanos);
        return updateCount;
    }

    @Override
    public Connection getConnection() throws SQLException {
        return new ConnectionWrapper(statement.getConnection(), statisticsCollector);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return statement.getFetchDirection();
    }

    @Override
    public int getFetchSize() throws SQLException {
        return statement.getFetchSize();
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return statement.getGeneratedKeys();
    }

    @Override
    public long getLargeMaxRows() throws SQLException {
        return statement.getLargeMaxRows();
    }

    @Override
    public long getLargeUpdateCount() throws SQLException {
        return statement.getLargeUpdateCount();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return statement.getMaxFieldSize();
    }

    @Override
    public int getMaxRows() throws SQLException {
        return statement.getMaxRows();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return statement.getMoreResults();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return statement.getMoreResults(current);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return statement.getQueryTimeout();
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        ResultSet resultSet = statement.getResultSet();
        return new ResultSetProxy(resultSet, getStatementName(), getAndIncrementResultSetNumber(), statisticsCollector);
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return statement.getResultSetConcurrency();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return statement.getResultSetHoldability();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return statement.getResultSetType();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return statement.getUpdateCount();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return statement.getWarnings();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return statement.isClosed();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return statement.isCloseOnCompletion();
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return statement.isPoolable();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        statement.setCursorName(name);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        statement.setEscapeProcessing(enable);
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        statement.setFetchDirection(direction);
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        statement.setFetchSize(rows);
    }

    @Override
    public void setLargeMaxRows(long max) throws SQLException {
        statement.setLargeMaxRows(max);
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        statement.setMaxFieldSize(max);
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        statement.setMaxRows(max);
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        statement.setPoolable(poolable);
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        statement.setQueryTimeout(seconds);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return statement.isWrapperFor(iface);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return statement.unwrap(iface);
    }

}
